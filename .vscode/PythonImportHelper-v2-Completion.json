[
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Tuple",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "cast",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "ResponseStatusEnum",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "ResponseStatusEnum",
        "importPath": "enums",
        "description": "enums",
        "isExtraImport": true,
        "detail": "enums",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerService",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "EmbeddingService",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "EmbeddingService",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerService",
        "importPath": "services",
        "description": "services",
        "isExtraImport": true,
        "detail": "services",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankItemModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankRequestModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankResponseModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ErrorResponseModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "EmbeddingControllerRequestModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "EmbeddingItemModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "EmbeddingControllerResponseModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "ErrorResponseModel",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankControllerImpl",
        "importPath": "implementations",
        "description": "implementations",
        "isExtraImport": true,
        "detail": "implementations",
        "documentation": {}
    },
    {
        "label": "EmbeddingControllerImpl",
        "importPath": "implementations",
        "description": "implementations",
        "isExtraImport": true,
        "detail": "implementations",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerBatcherServiceImpl",
        "importPath": "implementations",
        "description": "implementations",
        "isExtraImport": true,
        "detail": "implementations",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerServiceImpl",
        "importPath": "implementations",
        "description": "implementations",
        "isExtraImport": true,
        "detail": "implementations",
        "documentation": {}
    },
    {
        "label": "EmbeddingServiceBatcherServiceImpl",
        "importPath": "implementations",
        "description": "implementations",
        "isExtraImport": true,
        "detail": "implementations",
        "documentation": {}
    },
    {
        "label": "EmbeddingServiceImpl",
        "importPath": "implementations",
        "description": "implementations",
        "isExtraImport": true,
        "detail": "implementations",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "AutoModelForSequenceClassification",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoModel",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "AutoTokenizer",
        "importPath": "transformers",
        "description": "transformers",
        "isExtraImport": true,
        "detail": "transformers",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerBatcherService",
        "importPath": "services.CrossEncoderRerankerBatcherService",
        "description": "services.CrossEncoderRerankerBatcherService",
        "isExtraImport": true,
        "detail": "services.CrossEncoderRerankerBatcherService",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "EmbeddingBatcherService",
        "importPath": "services.EmbeddingBatcherService",
        "description": "services.EmbeddingBatcherService",
        "isExtraImport": true,
        "detail": "services.EmbeddingBatcherService",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "GZipMiddleware",
        "importPath": "fastapi.middleware.gzip",
        "description": "fastapi.middleware.gzip",
        "isExtraImport": true,
        "detail": "fastapi.middleware.gzip",
        "documentation": {}
    },
    {
        "label": "EmbeddingController",
        "importPath": "controllers",
        "description": "controllers",
        "isExtraImport": true,
        "detail": "controllers",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankController",
        "importPath": "controllers",
        "description": "controllers",
        "isExtraImport": true,
        "detail": "controllers",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankController",
        "kind": 6,
        "importPath": "controllers.CrossEncoderRerankController",
        "description": "controllers.CrossEncoderRerankController",
        "peekOfCode": "class CrossEncoderRerankController(CrossEncoderRerankControllerImpl):\n    def __init__(self, service: CrossEncoderRerankerService):\n        self.service = service\n        self.router = APIRouter()\n        self.router.add_api_route(\"/ce/reranker\", self.RerankAPI, methods=[\"POST\"])\n    async def RerankAPI(self, request: Request) -> JSONResponse:\n        try:\n            payload = await request.json()\n            req = CrossEncoderRerankRequestModel.model_validate(payload)\n        except Exception as exc:",
        "detail": "controllers.CrossEncoderRerankController",
        "documentation": {}
    },
    {
        "label": "EmbeddingController",
        "kind": 6,
        "importPath": "controllers.EmbeddingController",
        "description": "controllers.EmbeddingController",
        "peekOfCode": "class EmbeddingController(EmbeddingControllerImpl):\n    def __init__(self, service: EmbeddingService):\n        self.service = service\n        self.router = APIRouter()\n        self.router.add_api_route(\"/embedding\", self.EmbedAPI, methods=[\"POST\"])\n    async def EmbedAPI(self, request: Request) -> JSONResponse:\n        try:\n            payload = await request.json()\n            req = EmbeddingControllerRequestModel.model_validate(payload)\n        except Exception as exc:",
        "detail": "controllers.EmbeddingController",
        "documentation": {}
    },
    {
        "label": "ResponseStatusEnum",
        "kind": 6,
        "importPath": "enums.ResponseEnums",
        "description": "enums.ResponseEnums",
        "peekOfCode": "class ResponseStatusEnum(str, Enum):\n    SUCCESS = \"SUCCESS\"\n    VALIDATION_ERROR = \"VALIDATION_ERROR\"\n    SERVER_ERROR = \"SERVER_ERROR\"",
        "detail": "enums.ResponseEnums",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankControllerImpl",
        "kind": 6,
        "importPath": "implementations.CrossEncoderRerankControllerImpl",
        "description": "implementations.CrossEncoderRerankControllerImpl",
        "peekOfCode": "class CrossEncoderRerankControllerImpl(ABC):\n    @abstractmethod\n    async def RerankAPI(self, request: Request) -> JSONResponse:\n        pass",
        "detail": "implementations.CrossEncoderRerankControllerImpl",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerBatcherServiceImpl",
        "kind": 6,
        "importPath": "implementations.CrossEncoderRerankerBatcherServiceImpl",
        "description": "implementations.CrossEncoderRerankerBatcherServiceImpl",
        "peekOfCode": "class CrossEncoderRerankerBatcherServiceImpl(ABC):\n    @abstractmethod\n    async def start(self) -> None:\n        pass\n    @abstractmethod\n    async def submit(self, pairs: List[Tuple[str, str]]) -> List[Any]:\n        pass\n    @abstractmethod\n    async def _runLoop(self) -> None:\n        pass",
        "detail": "implementations.CrossEncoderRerankerBatcherServiceImpl",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerServiceImpl",
        "kind": 6,
        "importPath": "implementations.CrossEncoderRerankerServiceImpl",
        "description": "implementations.CrossEncoderRerankerServiceImpl",
        "peekOfCode": "class CrossEncoderRerankerServiceImpl(ABC):\n    @abstractmethod\n    async def LoadModel(self) -> None:\n        pass\n    @abstractmethod\n    async def ScoreBatched(self, pairs: List[Tuple[str, str]]) -> List[float]:\n        pass\n    @abstractmethod\n    def Score(self, pairs: List[Tuple[str, str]]) -> List[float]:\n        pass",
        "detail": "implementations.CrossEncoderRerankerServiceImpl",
        "documentation": {}
    },
    {
        "label": "EmbeddingControllerImpl",
        "kind": 6,
        "importPath": "implementations.EmbeddingControllerImpl",
        "description": "implementations.EmbeddingControllerImpl",
        "peekOfCode": "class EmbeddingControllerImpl(ABC):\n    @abstractmethod\n    async def EmbedAPI(self, request: Request) -> JSONResponse:\n        pass",
        "detail": "implementations.EmbeddingControllerImpl",
        "documentation": {}
    },
    {
        "label": "EmbeddingServiceBatcherServiceImpl",
        "kind": 6,
        "importPath": "implementations.EmbeddingServiceBatcherServiceImpl",
        "description": "implementations.EmbeddingServiceBatcherServiceImpl",
        "peekOfCode": "class EmbeddingServiceBatcherServiceImpl(ABC):\n    @abstractmethod\n    async def start(self) -> None:\n        pass\n    @abstractmethod\n    async def submit(self, texts: List[str]) -> List[Any]:\n        pass\n    @abstractmethod\n    async def _runLoop(self) -> None:\n        pass",
        "detail": "implementations.EmbeddingServiceBatcherServiceImpl",
        "documentation": {}
    },
    {
        "label": "EmbeddingServiceImpl",
        "kind": 6,
        "importPath": "implementations.EmbeddingServiceImpl",
        "description": "implementations.EmbeddingServiceImpl",
        "peekOfCode": "class EmbeddingServiceImpl(ABC):\n    @abstractmethod\n    def LoadModel(self) -> None:\n        pass\n    @abstractmethod\n    def MeanPool(self, lastHidden: torch.Tensor, mask: torch.Tensor) -> torch.Tensor:\n        pass\n    @abstractmethod\n    def Embed(self, texts: List[str]) -> List[List[float]]:\n        pass",
        "detail": "implementations.EmbeddingServiceImpl",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankRequestModel",
        "kind": 6,
        "importPath": "models.CrossEncoderRerankingModel",
        "description": "models.CrossEncoderRerankingModel",
        "peekOfCode": "class CrossEncoderRerankRequestModel(BaseModel):\n    query: str\n    docs: list[str]\n    returnDocuments: bool = False\n    topN: int = 10\nclass CrossEncoderRerankItemModel(BaseModel):\n    index: int\n    doc: str | None = None\n    score: float\nclass CrossEncoderRerankResponseModel(BaseModel):",
        "detail": "models.CrossEncoderRerankingModel",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankItemModel",
        "kind": 6,
        "importPath": "models.CrossEncoderRerankingModel",
        "description": "models.CrossEncoderRerankingModel",
        "peekOfCode": "class CrossEncoderRerankItemModel(BaseModel):\n    index: int\n    doc: str | None = None\n    score: float\nclass CrossEncoderRerankResponseModel(BaseModel):\n    results: list[CrossEncoderRerankItemModel]\n    query: str",
        "detail": "models.CrossEncoderRerankingModel",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankResponseModel",
        "kind": 6,
        "importPath": "models.CrossEncoderRerankingModel",
        "description": "models.CrossEncoderRerankingModel",
        "peekOfCode": "class CrossEncoderRerankResponseModel(BaseModel):\n    results: list[CrossEncoderRerankItemModel]\n    query: str",
        "detail": "models.CrossEncoderRerankingModel",
        "documentation": {}
    },
    {
        "label": "EmbeddingControllerRequestModel",
        "kind": 6,
        "importPath": "models.EmbeddingServiceModels",
        "description": "models.EmbeddingServiceModels",
        "peekOfCode": "class EmbeddingControllerRequestModel(BaseModel):\n    texts: List[str] = []\nclass EmbeddingItemModel(BaseModel):\n    index: int\n    embedding: List[float]\nclass EmbeddingControllerResponseModel(BaseModel):\n    results: List[EmbeddingItemModel]\n    dim: int\nclass ErrorResponseModel(BaseModel):\n    status: str",
        "detail": "models.EmbeddingServiceModels",
        "documentation": {}
    },
    {
        "label": "EmbeddingItemModel",
        "kind": 6,
        "importPath": "models.EmbeddingServiceModels",
        "description": "models.EmbeddingServiceModels",
        "peekOfCode": "class EmbeddingItemModel(BaseModel):\n    index: int\n    embedding: List[float]\nclass EmbeddingControllerResponseModel(BaseModel):\n    results: List[EmbeddingItemModel]\n    dim: int\nclass ErrorResponseModel(BaseModel):\n    status: str\n    detail: str",
        "detail": "models.EmbeddingServiceModels",
        "documentation": {}
    },
    {
        "label": "EmbeddingControllerResponseModel",
        "kind": 6,
        "importPath": "models.EmbeddingServiceModels",
        "description": "models.EmbeddingServiceModels",
        "peekOfCode": "class EmbeddingControllerResponseModel(BaseModel):\n    results: List[EmbeddingItemModel]\n    dim: int\nclass ErrorResponseModel(BaseModel):\n    status: str\n    detail: str",
        "detail": "models.EmbeddingServiceModels",
        "documentation": {}
    },
    {
        "label": "ErrorResponseModel",
        "kind": 6,
        "importPath": "models.EmbeddingServiceModels",
        "description": "models.EmbeddingServiceModels",
        "peekOfCode": "class ErrorResponseModel(BaseModel):\n    status: str\n    detail: str",
        "detail": "models.EmbeddingServiceModels",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerBatcherService",
        "kind": 6,
        "importPath": "services.CrossEncoderRerankerBatcherService",
        "description": "services.CrossEncoderRerankerBatcherService",
        "peekOfCode": "class CrossEncoderRerankerBatcherService(CrossEncoderRerankerBatcherServiceImpl):\n    def __init__(\n        self,\n        callFn: Callable[[List[Tuple[str, str]]], List[float]],\n        maxBatchSize: int = 50,\n        maxDelayMs: int = 5,\n    ):\n        self.callFn = callFn\n        self.maxBatchSize = maxBatchSize\n        self.maxDelay = maxDelayMs / 1000.0",
        "detail": "services.CrossEncoderRerankerBatcherService",
        "documentation": {}
    },
    {
        "label": "CrossEncoderRerankerService",
        "kind": 6,
        "importPath": "services.CrossEncoderRerankerService",
        "description": "services.CrossEncoderRerankerService",
        "peekOfCode": "class CrossEncoderRerankerService(CrossEncoderRerankerServiceImpl):\n    def __init__(self):\n        self.batcher: CrossEncoderRerankerBatcherService = (\n            CrossEncoderRerankerBatcherService(\n                self.Score,\n                maxBatchSize=int(os.getenv(\"MAX_CE_RE_RANKER_BACTH_SIZE\", 100)),\n                maxDelayMs=int(os.getenv(\"MAX_CE_RE_RANKER_BACTH_REQUEST_DELAY\", 5)),\n            )\n        )\n        self._initialized = False",
        "detail": "services.CrossEncoderRerankerService",
        "documentation": {}
    },
    {
        "label": "EmbeddingBatcherService",
        "kind": 6,
        "importPath": "services.EmbeddingBatcherService",
        "description": "services.EmbeddingBatcherService",
        "peekOfCode": "class EmbeddingBatcherService(EmbeddingServiceBatcherServiceImpl):\n    def __init__(\n        self,\n        callFn: Callable[[List[str]], List[Any]],\n        maxBatchSize: int = 16,\n        maxDelayMs: int = 10,\n    ):\n        self.callFn = callFn\n        self.maxBatchSize = maxBatchSize\n        self.maxDelay = maxDelayMs / 1000.0",
        "detail": "services.EmbeddingBatcherService",
        "documentation": {}
    },
    {
        "label": "EmbeddingService",
        "kind": 6,
        "importPath": "services.EmbeddingService",
        "description": "services.EmbeddingService",
        "peekOfCode": "class EmbeddingService(EmbeddingServiceImpl):\n    def LoadModel(self) -> None:\n        torch.backends.cudnn.benchmark = True\n        global tokenizer, model, keepaliveTask\n        if tokenizer is not None and model is not None:\n            return\n        tokenizer = cast(Any, AutoTokenizer).from_pretrained(modelName, use_fast=True)\n        dtype = torch.float16 if torch.cuda.is_available() else torch.float32\n        model = cast(Any, AutoModel).from_pretrained(modelName, dtype=dtype)\n        if torch.cuda.is_available():",
        "detail": "services.EmbeddingService",
        "documentation": {}
    },
    {
        "label": "port",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "port = int(os.getenv(\"PORT\", \"8000\"))\nembeddingService = EmbeddingService()\nrerankerService = CrossEncoderRerankerService()\nembeddingController = EmbeddingController(embeddingService)\ncrossEncoderRerankerController = CrossEncoderRerankController(rerankerService)\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await asyncio.to_thread(embeddingService.LoadModel)\n    await rerankerService.LoadModel()\n    await embeddingService.batcher.start()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "embeddingService",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "embeddingService = EmbeddingService()\nrerankerService = CrossEncoderRerankerService()\nembeddingController = EmbeddingController(embeddingService)\ncrossEncoderRerankerController = CrossEncoderRerankController(rerankerService)\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await asyncio.to_thread(embeddingService.LoadModel)\n    await rerankerService.LoadModel()\n    await embeddingService.batcher.start()\n    await rerankerService.batcher.start()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "rerankerService",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "rerankerService = CrossEncoderRerankerService()\nembeddingController = EmbeddingController(embeddingService)\ncrossEncoderRerankerController = CrossEncoderRerankController(rerankerService)\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await asyncio.to_thread(embeddingService.LoadModel)\n    await rerankerService.LoadModel()\n    await embeddingService.batcher.start()\n    await rerankerService.batcher.start()\n    try:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "embeddingController",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "embeddingController = EmbeddingController(embeddingService)\ncrossEncoderRerankerController = CrossEncoderRerankController(rerankerService)\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await asyncio.to_thread(embeddingService.LoadModel)\n    await rerankerService.LoadModel()\n    await embeddingService.batcher.start()\n    await rerankerService.batcher.start()\n    try:\n        if (",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "crossEncoderRerankerController",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "crossEncoderRerankerController = CrossEncoderRerankController(rerankerService)\n@asynccontextmanager\nasync def lifespan(app: FastAPI):\n    await asyncio.to_thread(embeddingService.LoadModel)\n    await rerankerService.LoadModel()\n    await embeddingService.batcher.start()\n    await rerankerService.batcher.start()\n    try:\n        if (\n            torch.cuda.is_available()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.add_middleware(GZipMiddleware, minimum_size=800)\napp.include_router(embeddingController.router, prefix=\"/api/v1\")",
        "detail": "main",
        "documentation": {}
    }
]